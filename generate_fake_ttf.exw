
constant prologue =
  "format PE GUI DLL\n\n" &
  "entry DllEntryPoint\n\n" &
  "include 'win32ax.inc'\n\n"

constant proc_DllEntryPoint = 
  "proc DllEntryPoint hinstDLL, fwdReason, lpvReserved\n" &
  "    mov eax, TRUE\n" &
  "    ret\n" &
  "endp\n\n"
                    
constant modified_procedure_body =
  "    cinvoke ChangeText, [pwcText]\n" &
  "    test eax, eax\n" &
  "    jz @f\n" &
  "    mov [pwcText], eax\n" &
  "@@:\n"  

constant modified_procedures = 
  "label pwcText dword at esp+8\n" &
  "TTF_RenderUNICODE_Blended:\n" &
  modified_procedure_body &
  "    jmp dword [real_TTF_RenderUNICODE_Blended]\n\n" &
  "TTF_SizeUNICODE:\n" &
  modified_procedure_body &
  "    jmp dword [real_TTF_RenderUNICODE_Blended]\n\n"
  
constant SDL_ttf_export = {
  "TTF_ByteSwappedUNICODE",
  "TTF_CloseFont",
  "TTF_FontAscent",
  "TTF_FontDescent",
  "TTF_FontFaceFamilyName",
  "TTF_FontFaceIsFixedWidth",
  "TTF_FontFaceStyleName",
  "TTF_FontFaces",
  "TTF_FontHeight",
  "TTF_FontLineSkip",
  "TTF_GetFontHinting",
  "TTF_GetFontKerning",
  "TTF_GetFontOutline",
  "TTF_GetFontStyle",
  "TTF_GlyphIsProvided",
  "TTF_GlyphMetrics",
  "TTF_Init",
  "TTF_Linked_Version",
  "TTF_OpenFont",
  "TTF_OpenFontIndex",
  "TTF_OpenFontIndexRW",
  "TTF_OpenFontRW",
  "TTF_Quit",
  "TTF_RenderGlyph_Blended",
  "TTF_RenderGlyph_Shaded",
  "TTF_RenderGlyph_Solid",
  "TTF_RenderText_Blended",
  "TTF_RenderText_Shaded",
  "TTF_RenderText_Solid",
  "TTF_RenderUNICODE_Blended",
  "TTF_RenderUNICODE_Shaded",
  "TTF_RenderUNICODE_Solid",
  "TTF_RenderUTF8_Blended",
  "TTF_RenderUTF8_Shaded",
  "TTF_RenderUTF8_Solid",
  "TTF_SetFontHinting",
  "TTF_SetFontKerning",
  "TTF_SetFontOutline",
  "TTF_SetFontStyle",
  "TTF_SizeText",
  "TTF_SizeUNICODE",
  "TTF_SizeUTF8",
  "TTF_WasInit"
}

constant
  index_TTF_RenderUNICODE_Blended = find("TTF_RenderUNICODE_Blended", SDL_ttf_export),
  index_TTF_SizeUNICODE = find("TTF_SizeUNICODE", SDL_ttf_export)

constant fn = open("Fake_ttf.asm", "w")

puts(fn, prologue)
puts(fn, "section '.text' code readable executable\n\n")

puts(fn, proc_DllEntryPoint)

puts(fn, "label pwcText dword at esp+8\n\n")

for i = 1 to length(SDL_ttf_export) do
  printf(fn, "%s:\n", {SDL_ttf_export[i]})
  if i=index_TTF_RenderUNICODE_Blended or i=index_TTF_SizeUNICODE then
    puts(fn, modified_procedure_body)  
  end if
  printf(fn, "    jmp dword [real_%s]\n", {SDL_ttf_export[i]})
  puts(fn, "\n")
end for

puts(fn, "section '.idata' import data readable writeable\n\n")

puts(fn, "  library sdl_ttf, 'Real_ttf.dll',\\\n" &
         "        changetext, 'ChangeText.dll'\n\n") 
                                                    
puts(fn, "  import changetext,\\\n" &
         "        ChangeText, 'ChangeText'\n\n")

puts(fn, "  import sdl_ttf,\\\n")

for i = 1 to length(SDL_ttf_export) do
  printf(fn, "    real_%s, '%s'", repeat(SDL_ttf_export[i],2))
  if i < length(SDL_ttf_export) then
    puts(fn, ",\\")
  end if           
  puts(fn, "\n")
end for
puts(fn, "\n")

puts(fn, "section '.edata' export data readable\n\n")

puts(fn, "  export 'SDL_ttf.dll',\\\n")

for i = 1 to length(SDL_ttf_export) do
  printf(fn, "    %s, '%s'", repeat(SDL_ttf_export[i],2))
  if i < length(SDL_ttf_export) then
    puts(fn, ",\\")
  end if           
  puts(fn, "\n")
end for

puts(fn, "\n")

puts(fn, "section '.reloc' fixups data readable discardable\n")

close(fn)